{"version":3,"sources":["components/Calendar/header.js","utils/index.js","components/Calendar/calendar.js","components/colorpicker.js","components/timepicker.js","components/daypicker.js","components/Reminders/reminder.js","components/Reminders/reminders.js","store/actions/calendar.js","store/actions/types.js","store/actions/reminders.js","containers/App.js","store/reducers/calendar.js","store/reducers/reminders.js","store/reducers/index.js","store/index.js","index.js"],"names":["Header","_ref","prevMonth","nextMonth","currentMonth","dateFormat","react_default","a","createElement","className","onClick","dateFns","format","formatDateKey","date","String","Date","sortByDate","array","sort","b","getTime","getEventParent","inputEvent","parent","currentTarget","closest","filterRemindersByDate","reminders","dateKey","filter","r","Calendar","renderDays","days","startDate","startOfWeek","_this","props","i","push","key","addDays","renderReminders","currentDay","length","currentDateKey","currentDateReminders","_loop","id","map","reminder","reminderDateKey","text","color","currentDateRemindersLeft","moreRemindersText","concat","Fragment","style","backgroundColor","padding","renderTiles","_this$props","selectedDate","allReminders","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","formattedDate","_loop2","cloneDay","tileClass","isSameMonth","isSameDay","handleDayClick","parse","selectDay","handleNextMonthClick","selectNextMonth","addMonths","handlePrevMonthClick","selectPrevMonth","subMonths","header","this","React","Component","colors","value","name","ColorPicker","state","option","undefined","onChange","TimePicker","times","time","formatDayValue","dayList","eachDay","DayPicker","currentmonth","isEqual","PureComponent","Reminder","pt","string","isRequired","oneOfType","instanceOf","funcs","maxcharacters","selectedTime","tabIndex","js-data-key","js-data-text","js-data-color","js-data-date","type","maxLength","size","handleUpdate","daypicker","timepicker","colorpicker","handleEditButtonClick","handleDeleteButtonClick","MAX_CHARACTERS","TIME_FORMAT","DAY_FORMAT","DEFAULT_DAY","REMINDER_PARENT_SELECTOR","initialState","charactersLeft","selectedDateKey","Reminders","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleReminderTextInput","target","setState","replace","trim","handleNewReminderState","e","preventDefault","_e$currentTarget","currentDate","selectCalendarDay","defineProperty","reminderElement","reminderId","getAttribute","reminderText","reminderDate","_e$currentTarget2","reminderTime","reminderDay","assign","updateReminder","handleFormSubmit","_this$state","newReminderData","createReminder","querySelector","focus","deleteReminder","objectSpread","_this2","formattedSelectedDate","onSubmit","placeholder","required","Reminders_reminder","newState","newDateKey","newSelectedDay","actions_calendar","payload","month","actions_reminders","Math","random","toString","substr","modifiedReminder","App","calendar","Calendar_calendar","Reminders_reminders","connect","dispatch","calendarActions","bindActionCreators","remindersActions","filteredReminders","sortedReminders","currentReminders","combineReducers","arguments","reminderIndex","findIndex","x","reminderToUpdate","s","createStore","rootReducer","ReactDOM","render","es","store","containers_App","document"],"mappings":"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","file":"static/js/main.36120475.chunk.js","sourcesContent":["import React from 'react';\nimport dateFns from 'date-fns';\nimport pt from 'prop-types';\n\nconst Header = ({ prevMonth, nextMonth, currentMonth, dateFormat }) => (\n    <div className=\"calendar__header\">\n        <div className=\"calendar__header-text\">\n            <div className=\"calendar__row\">\n                <div className=\"calendar__row-middle\">\n                    <div className=\"calendar__col\">\n                        <div className=\"calendar__col-start\">\n                            <div className=\"calendar__header-icon\">\n                                <button className=\"icon\" onClick={prevMonth}>\n                                    chevron_left\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"calendar__col\">\n                        <span className=\"calendar__col-center\">\n                            {dateFns.format(currentMonth, dateFormat)}\n                        </span>\n                    </div>\n                    <div className=\"calendar__col\">\n                        <div className=\"calendar__col-end\">\n                            <div className=\"calendar__header-icon\">\n                                <button className=\"icon\" onClick={nextMonth}>\n                                    chevron_right\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nHeader.propTypes = {\n    prevMonth: pt.func.isRequired,\n    nextMonth: pt.func.isRequired,\n    currentMonth: pt.instanceOf(Date).isRequired,\n    dateFormat: pt.string.isRequired,\n};\n\nexport default Header;\n","import { format } from 'date-fns';\n\n/**\n * Generate random string to be used as\n * reminder ids\n *\n * @returns {string}\n */\nexport const uuid = () =>\n    `_${Math.random()\n        .toString(36)\n        .substr(2, 9)}`;\n\n/**\n * Uppercase a strings first character\n *\n * @param {string} str to have its first character uppercased\n *\n * @returns {string}\n */\nexport const uppercaseFirstLetter = str =>\n    str.charAt(0).toUpperCase() + str.slice(1);\n\n/**\n * Returns the formatted date key used for comparisions\n *\n * @param {string / Date instance} date to be formatted\n *\n * @returns {string}\n */\nexport const formatDateKey = date =>\n    String(format(new Date(date), 'DD_MM_GGGG'));\n\n/**\n * Sorts the array by newest to oldest date\n *\n * @param {array} array of objects with a date key\n *\n * @returns {array}\n */\nexport const sortByDate = array =>\n    array.sort(\n        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),\n    );\n\n/**\n *\n * Finds parent element of selector\n *\n * @param {Input Event} inputEvent event from i.e.\n * select field or input field\n * @param {string} parent element selector\n *\n * @returns {Node / undefined} the parent element or undefined\n */\nexport const getEventParent = (inputEvent, parent) => {\n    const parentElement = inputEvent.currentTarget.closest(parent);\n\n    return parentElement;\n};\n\n/**\n * Filters an array of reminders by the given dateKey\n *\n * @param {array} reminders\n * @param {string} dateKey to compare the reminder date with\n *\n * @returns {array}\n */\nexport const filterRemindersByDate = (reminders, dateKey) => {\n    const remindersByDate = reminders.filter(\n        r => formatDateKey(r.date) === dateKey,\n    );\n\n    return remindersByDate;\n};\n","import React from 'react';\nimport dateFns from 'date-fns';\nimport pt from 'prop-types';\n\nimport Header from './header';\nimport { formatDateKey, filterRemindersByDate } from '../../utils';\n\nclass Calendar extends React.Component {\n    renderDays = () => {\n        const days = [];\n        const dateFormat = 'dddd';\n        const startDate = dateFns.startOfWeek(this.props.currentMonth);\n\n        for (let i = 0; i < 7; i++) {\n            days.push(\n                <div className=\"calendar__col\" key={i}>\n                    <div className=\"calendar__col-center\">\n                        {dateFns.format(\n                            dateFns.addDays(startDate, i),\n                            dateFormat,\n                        )}\n                    </div>\n                </div>,\n            );\n        }\n\n        return (\n            <div className=\"calendar__days\">\n                <div className=\"calendar__row\">{days}</div>\n            </div>\n        );\n    };\n\n    renderReminders = (reminders, currentDay) => {\n        if (reminders.length === 0) {\n            return null;\n        }\n\n        // Get reminders for the currently selected day\n        const currentDateKey = formatDateKey(currentDay);\n        const currentDateReminders = filterRemindersByDate(\n            reminders,\n            currentDateKey,\n        );\n\n        // Keep only one reminder per day to show on the tile\n        if (currentDateReminders.length >= 2) {\n            for (let i = 1; i < currentDateReminders.length; i++) {\n                reminders = reminders.filter(\n                    r => r.id !== currentDateReminders[i].id,\n                );\n            }\n        }\n\n        return reminders.map(reminder => {\n            const reminderDateKey = formatDateKey(reminder.date);\n            const { id, text, date, color } = reminder;\n\n            const currentDateRemindersLeft = currentDateReminders.length - 1;\n            const moreRemindersText =\n                currentDateRemindersLeft !== 0\n                    ? `${currentDateRemindersLeft} more...`\n                    : null;\n\n            if (reminderDateKey === currentDateKey) {\n                return (\n                    <React.Fragment key={id}>\n                        <div className=\"calendar__body-reminder\">\n                            <div\n                                style={{\n                                    backgroundColor: color,\n                                    padding: '0.5em',\n                                }}>\n                                <p>{text}</p>\n                                <p className=\"small\">\n                                    {dateFns.format(date, 'h:mm A')}\n                                </p>\n                            </div>\n                        </div>\n\n                        <p className=\"small-text\">{moreRemindersText}</p>\n                    </React.Fragment>\n                );\n            }\n\n            return null;\n        });\n    };\n\n    renderTiles = () => {\n        const { currentMonth, selectedDate, allReminders } = this.props;\n        const monthStart = dateFns.startOfMonth(currentMonth);\n        const monthEnd = dateFns.endOfMonth(monthStart);\n        const startDate = dateFns.startOfWeek(monthStart);\n        const endDate = dateFns.endOfWeek(monthEnd);\n\n        const rows = [];\n        const dateFormat = 'D';\n\n        let days = [];\n        let day = startDate;\n        let formattedDate = '';\n\n        while (day <= endDate) {\n            // Build days array\n            for (let i = 0; i < 7; i++) {\n                formattedDate = dateFns.format(day, dateFormat);\n                const cloneDay = day;\n\n                let tileClass = '';\n                if (!dateFns.isSameMonth(day, monthStart)) {\n                    // Out of range days\n                    tileClass = 'calendar__body-celldisabled';\n                } else if (dateFns.isSameDay(day, selectedDate)) {\n                    // User selected days\n                    tileClass = 'calendar__body-cellselected';\n                }\n\n                days.push(\n                    <div className=\"calendar__col\" key={day}>\n                        <div\n                            className={`calendar__body-cell ${tileClass}`}\n                            onClick={() =>\n                                this.handleDayClick(dateFns.parse(cloneDay))\n                            }>\n                            <span className=\"calendar__body-cellnumber\">\n                                {formattedDate}\n                            </span>\n\n                            {this.renderReminders(allReminders, day)}\n                        </div>\n                    </div>,\n                );\n\n                day = dateFns.addDays(day, 1);\n            }\n\n            // Build rows array\n            rows.push(\n                <div className=\"calendar__row\" key={day}>\n                    {days}\n                </div>,\n            );\n\n            days = [];\n        }\n\n        return <div className=\"calendar__body\">{rows}</div>;\n    };\n\n    handleDayClick = day => {\n        this.props.selectDay(day);\n    };\n\n    handleNextMonthClick = () => {\n        this.props.selectNextMonth(\n            dateFns.addMonths(this.props.currentMonth, 1),\n        );\n    };\n\n    handlePrevMonthClick = () => {\n        this.props.selectPrevMonth(\n            dateFns.subMonths(this.props.currentMonth, 1),\n        );\n    };\n\n    render() {\n        const dateFormat = 'MMMM YYYY';\n\n        return (\n            <div className=\"calendar\">\n                <Header\n                    prevMonth={this.handlePrevMonthClick}\n                    nextMonth={this.handleNextMonthClick}\n                    currentMonth={this.props.currentMonth}\n                    dateFormat={dateFormat}\n                />\n                {this.renderDays()}\n                {this.renderTiles()}\n            </div>\n        );\n    }\n}\n\nCalendar.propTypes = {\n    currentMonth: pt.instanceOf(Date).isRequired,\n    selectPrevMonth: pt.func.isRequired,\n    selectNextMonth: pt.func.isRequired,\n    selectDay: pt.func.isRequired,\n    selectedDate: pt.instanceOf(Date).isRequired,\n    allReminders: pt.array.isRequired,\n};\n\nexport default Calendar;\n","import React from 'react';\nimport pt from 'prop-types';\n\nconst colors = [\n    { value: '#3E60FC', name: 'Blue' },\n    { value: '#FC2943', name: 'Red' },\n    { value: '#B249FC', name: 'Purple' },\n    // { value: '#FC9F8B', name: 'Pink' },\n    // { value: '#FCEF3A', name: 'Yellow' },\n    { value: '#151739', name: 'Black' },\n];\n\nclass ColorPicker extends React.Component {\n    static getDerivedStateFromProps(props, state) {\n        if (props.option !== state.option) {\n            return { option: props.option };\n        }\n\n        return null;\n    }\n\n    state = {\n        option: undefined,\n    };\n\n    render() {\n        return (\n            <span className=\"reminders__body-listitem-select\">\n                <select\n                    className=\"select\"\n                    value={this.state.option}\n                    onChange={this.props.onChange}\n                    name={this.props.name}>\n                    {colors.map(color => (\n                        <option value={color.value} key={color.value}>\n                            {color.name}\n                        </option>\n                    ))}\n                </select>\n            </span>\n        );\n    }\n}\n\nColorPicker.propTypes = {\n    name: pt.string.isRequired,\n    onChange: pt.func.isRequired,\n    option: pt.string,\n};\n\nexport default ColorPicker;\n","import React from 'react';\nimport pt from 'prop-types';\n\nclass TimePicker extends React.Component {\n    static getDerivedStateFromProps(props, state) {\n        if (props.option !== state.option) {\n            return { option: props.option };\n        }\n\n        return null;\n    }\n\n    state = {\n        option: undefined,\n    };\n\n    render() {\n        return (\n            <span className=\"reminders__body-listitem-select\">\n                <select\n                    className=\"select\"\n                    value={this.state.option}\n                    onChange={this.props.onChange}\n                    name={this.props.name}>\n                    {times.map(time => (\n                        <option value={time} key={time}>\n                            {time}\n                        </option>\n                    ))}\n                </select>\n            </span>\n        );\n    }\n}\n\nTimePicker.propTypes = {\n    name: pt.string.isRequired,\n    onChange: pt.func.isRequired,\n    option: pt.string,\n};\n\nexport default TimePicker;\n\nconst times = [\n    '12:00 AM',\n    '12:30 AM',\n    '1:00 AM',\n    '1:30 AM',\n    '2:00 AM',\n    '2:30 AM',\n    '3:00 AM',\n    '3:30 AM',\n    '4:00 AM',\n    '4:30 AM',\n    '5:00 AM',\n    '5:30 AM',\n    '6:00 AM',\n    '6:30 AM',\n    '7:00 AM',\n    '7:30 AM',\n    '8:00 AM',\n    '8:30 AM',\n    '9:00 AM',\n    '9:30 AM',\n    '10:00 AM',\n    '10:30 AM',\n    '11:00 AM',\n    '11:30 AM',\n    '12:00 PM',\n    '12:30 PM',\n    '1:00 PM',\n    '1:30 PM',\n    '2:30 PM',\n    '2:00 PM',\n    '3:00 PM',\n    '3:30 PM',\n    '4:00 PM',\n    '4:30 PM',\n    '5:00 PM',\n    '5:30 PM',\n    '6:00 PM',\n    '6:30 PM',\n    '7:00 PM',\n    '7:30 PM',\n    '8:00 PM',\n    '8:30 PM',\n    '9:00 PM',\n    '9:30 PM',\n    '10:00 PM',\n    '10:30 PM',\n    '11:00 PM',\n    '11:30 PM',\n];\n","import React from 'react';\nimport dateFns from 'date-fns';\nimport pt from 'prop-types';\n\nconst formatDayDisplay = date => dateFns.format(date, 'MMM Do');\nconst formatDayValue = date => dateFns.format(date, 'MMM DD GGGG');\n\nconst dayList = currentMonth => {\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const daysInMonth = dateFns.eachDay(monthStart, monthEnd);\n\n    return daysInMonth;\n};\n\nclass DayPicker extends React.PureComponent {\n    static getDerivedStateFromProps(props, state) {\n        const dateKey = formatDayValue(props.option);\n        if (props.option !== state.option) {\n            return { option: dateKey };\n        }\n\n        return null;\n    }\n\n    state = {\n        option: undefined,\n    };\n\n    render() {\n        const { currentmonth, option } = this.props;\n\n        /**\n         * If the props.option date is the different from\n         * the props.currentmonth then prefer props.option\n         * date as that would be the value of the current\n         * picker instance. Otherwise default to using\n         * props.currentmonth\n         */\n        let days = dayList(this.props.currentmonth);\n        if (!dateFns.isEqual(option, currentmonth)) {\n            days = dayList(this.props.option);\n        }\n\n        return (\n            <span className=\"reminders__body-listitem-select\">\n                <select\n                    className=\"select\"\n                    onChange={this.props.onChange}\n                    value={this.state.option}\n                    name={this.props.name}>\n                    {days.map(day => (\n                        <option value={formatDayValue(day)} key={day}>\n                            {formatDayDisplay(day)}\n                        </option>\n                    ))}\n                </select>\n            </span>\n        );\n    }\n}\n\nDayPicker.propTypes = {\n    name: pt.string.isRequired,\n    currentmonth: pt.instanceOf(Date).isRequired,\n    onChange: pt.func.isRequired,\n    option: pt.oneOfType([pt.instanceOf(Date), pt.string]),\n};\n\nexport default DayPicker;\n","import React from 'react';\nimport { format } from 'date-fns';\nimport pt from 'prop-types';\n\nimport ColorPicker from '../colorpicker';\nimport TimePicker from '../timepicker';\nimport DayPicker from '../daypicker';\n\nconst Reminder = props => {\n    const { id, text, date, color, funcs, currentmonth, maxcharacters } = props;\n    const selectedTime = format(date, 'h:mm A');\n\n    return (\n        <li\n            className=\"reminders__body-listitem\"\n            tabIndex=\"0\"\n            js-data-key={id}\n            js-data-text={text}\n            js-data-color={color}\n            js-data-date={date}>\n            <div className=\"reminders__body-listitem-content\">\n                <div className=\"reminders__row\">\n                    <input\n                        type=\"text\"\n                        name=\"text\"\n                        className=\"input input__editablecontent\"\n                        value={text}\n                        maxLength={maxcharacters}\n                        size={maxcharacters}\n                        onChange={funcs.handleUpdate}\n                    />\n                </div>\n            </div>\n            <div className=\"reminders__body-listitem-actions\">\n                <div className=\"reminders__row\">\n                    <DayPicker\n                        name=\"day\"\n                        option={date}\n                        currentmonth={currentmonth}\n                        onChange={funcs.handleUpdate}\n                    />\n                    <TimePicker\n                        name=\"time\"\n                        option={selectedTime}\n                        onChange={funcs.handleUpdate}\n                    />\n                    <ColorPicker\n                        name=\"color\"\n                        option={color}\n                        onChange={funcs.handleUpdate}\n                    />\n                    <button\n                        className=\"icon\"\n                        onClick={funcs.handleEditButtonClick}\n                        tabIndex=\"0\">\n                        create\n                    </button>\n                    <button\n                        className=\"icon\"\n                        onClick={funcs.handleDeleteButtonClick}\n                        tabIndex=\"0\">\n                        delete_forever\n                    </button>\n                </div>\n            </div>\n        </li>\n    );\n};\n\nexport const reminderBasePropType = {\n    id: pt.string.isRequired,\n    text: pt.string.isRequired,\n    date: pt.oneOfType([pt.instanceOf(Date), pt.string]).isRequired,\n    color: pt.string.isRequired,\n};\nReminder.propTypes = {\n    ...reminderBasePropType,\n    funcs: pt.object.isRequired,\n    currentmonth: pt.instanceOf(Date).isRequired,\n    maxcharacters: pt.number.isRequired,\n};\n\nexport default Reminder;\n","import React from 'react';\nimport { format } from 'date-fns';\nimport pt from 'prop-types';\n\nimport Reminder, { reminderBasePropType } from './reminder';\nimport ColorPicker from '../colorpicker';\nimport TimePicker from '../timepicker';\nimport DayPicker from '../daypicker';\nimport { formatDateKey, getEventParent } from '../../utils';\n\nconst date = new Date();\nconst MAX_CHARACTERS = 30;\nconst DEFAULT_COLOR = '#3E60FC';\nconst TIME_FORMAT = 'h:mm A';\nconst DAY_FORMAT = 'MMM DD GGGG';\nconst DEFAULT_DAY = format(date, DAY_FORMAT);\nconst DEFAULT_TIME = '12:00 AM';\nconst REMINDER_PARENT_SELECTOR = 'li.reminders__body-listitem';\n\nconst initialState = {\n    text: '',\n    day: DEFAULT_DAY,\n    time: DEFAULT_TIME,\n    color: DEFAULT_COLOR,\n    charactersLeft: MAX_CHARACTERS,\n    selectedDateKey: '',\n};\n\nclass Reminders extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...initialState,\n            selectedDateKey: formatDateKey(props.selectedDate),\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const newState = {};\n\n        const newDateKey = formatDateKey(props.selectedDate);\n        if (newDateKey !== state.selectedDateKey) {\n            Object.assign(newState, { selectedDateKey: newDateKey });\n        }\n\n        const newSelectedDay = format(props.selectedDate, DAY_FORMAT);\n        if (newSelectedDay !== state.day) {\n            Object.assign(newState, { day: newSelectedDay });\n        }\n\n        return newState;\n    }\n\n    handleReminderTextInput = ({ target: { value } }) => {\n        this.setState({\n            text: value.replace(/\\s+/g, ' ').trim(),\n            charactersLeft: MAX_CHARACTERS - value.length,\n        });\n    };\n\n    handleNewReminderState = e => {\n        e.preventDefault();\n\n        const { name, value } = e.currentTarget;\n\n        /**\n         * Format day selection to datetime and invoke\n         * select calendar date action\n         */\n        if (name === 'day') {\n            const currentDate = new Date(`${value} ${this.state.time}`);\n\n            this.props.selectCalendarDay(currentDate);\n        }\n\n        this.setState({ [name]: value });\n    };\n\n    handleUpdate = e => {\n        e.preventDefault();\n\n        const reminderElement = getEventParent(e, REMINDER_PARENT_SELECTOR);\n        const reminderId = reminderElement.getAttribute('js-data-key');\n        const reminderText = reminderElement.getAttribute('js-data-text');\n        const reminderDate = reminderElement.getAttribute('js-data-date');\n        const reminderColor = reminderElement.getAttribute('js-data-color');\n        const reminder = {\n            text: reminderText,\n            date: reminderDate,\n            color: reminderColor,\n        };\n\n        /**\n         * Build datetime value from either day or time selector\n         * and the current reminders datetime value\n         */\n        let { name, value } = e.currentTarget;\n        if (name === 'day' || name === 'time') {\n            if (name === 'day') {\n                const reminderTime = format(\n                    new Date(reminderDate),\n                    TIME_FORMAT,\n                );\n                value = new Date(`${value} ${reminderTime}`);\n            } else if (name === 'time') {\n                const reminderDay = format(new Date(reminderDate), DAY_FORMAT);\n                value = new Date(`${reminderDay} ${value}`);\n            }\n\n            name = 'date';\n        }\n\n        // Trim whitespace from text string\n        if (name === 'text') {\n            value = value.replace(/\\s+/g, ' ').trim();\n        }\n\n        Object.assign(reminder, { [name]: value });\n\n        this.props.updateReminder(reminderId, reminder);\n    };\n\n    handleFormSubmit = e => {\n        e.preventDefault();\n\n        const { text, day, time, color } = this.state;\n        const date = new Date(`${day} ${time}`);\n        const newReminderData = {\n            date,\n            text: text.replace(/\\s+/g, ' ').trim(),\n            color,\n        };\n\n        delete initialState.selectedDateKey;\n        this.setState(initialState);\n        this.props.createReminder(newReminderData);\n    };\n\n    handleEditButtonClick = e => {\n        const parentElement = getEventParent(e, REMINDER_PARENT_SELECTOR);\n\n        parentElement.querySelector('input').focus();\n    };\n\n    handleDeleteButtonClick = e => {\n        const parentElement = getEventParent(e, REMINDER_PARENT_SELECTOR);\n        const reminderId = parentElement.getAttribute('js-data-key');\n\n        this.props.deleteReminder(reminderId);\n    };\n\n    render() {\n        const { selectedDate, currentMonth, reminders } = this.props;\n        const formattedSelectedDate = format(selectedDate, 'dddd MMM Do, GGGG');\n        return (\n            <div className=\"reminders\">\n                <div className=\"reminders__header\">\n                    <div className=\"reminders__row\">\n                        <div className=\"reminders__row-middle\">\n                            <span className=\"reminders__header-text\">\n                                Reminders\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"reminders__row\">\n                        <div className=\"reminders__row-middle\">\n                            <span className=\"reminders__date\">\n                                {formattedSelectedDate}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"reminders__body\">\n                    <form\n                        className=\"reminders__form\"\n                        onSubmit={this.handleFormSubmit}>\n                        <div className=\"reminders__row\">\n                            <input\n                                type=\"text\"\n                                className=\"input\"\n                                placeholder=\"Add a new reminder...\"\n                                maxLength={MAX_CHARACTERS}\n                                size={MAX_CHARACTERS}\n                                value={this.state.text}\n                                name=\"text\"\n                                onChange={this.handleReminderTextInput}\n                                required={true}\n                            />\n                            <button type=\"submit\" className=\"button\">\n                                <span className=\"icon\">forward</span>\n                            </button>\n                        </div>\n                        <div className=\"reminders__row reminders__row-space-between\">\n                            <DayPicker\n                                name=\"day\"\n                                currentmonth={currentMonth}\n                                onChange={this.handleNewReminderState}\n                                option={this.state.day}\n                            />\n                            <TimePicker\n                                name=\"time\"\n                                onChange={this.handleNewReminderState}\n                                option={this.state.time}\n                            />\n                            <ColorPicker\n                                name=\"color\"\n                                onChange={this.handleNewReminderState}\n                                option={this.state.color}\n                            />\n                        </div>\n                    </form>\n                    <div className=\"reminders__body-charactercount\">\n                        <p>\n                            <strong>{this.state.charactersLeft}</strong>/\n                            {MAX_CHARACTERS}\n                        </p>\n                    </div>\n                    <ul className=\"reminders__body-list\">\n                        {reminders.length > 0 ? (\n                            reminders.map(r => (\n                                <Reminder\n                                    key={r.id}\n                                    currentmonth={currentMonth}\n                                    maxcharacters={MAX_CHARACTERS}\n                                    funcs={{\n                                        handleUpdate: this.handleUpdate,\n                                        handleEditButtonClick: this\n                                            .handleEditButtonClick,\n                                        handleDeleteButtonClick: this\n                                            .handleDeleteButtonClick,\n                                    }}\n                                    {...r}\n                                />\n                            ))\n                        ) : (\n                            <li\n                                className=\"reminders__body-listitem\"\n                                tabIndex=\"0\">\n                                <div className=\"reminders__body-listitem-content\">\n                                    <p className=\"reminders__body-list-nocontent\">\n                                        No reminders for {formattedSelectedDate}\n                                    </p>\n                                </div>\n                            </li>\n                        )}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nReminders.propTypes = {\n    selectedDate: pt.instanceOf(Date).isRequired,\n    currentMonth: pt.instanceOf(Date).isRequired,\n    reminders: pt.arrayOf(pt.shape(reminderBasePropType)),\n    deleteReminder: pt.func.isRequired,\n    createReminder: pt.func.isRequired,\n    updateReminder: pt.func.isRequired,\n    selectCalendarDay: pt.func.isRequired,\n};\n\nexport default Reminders;\n","import { SELECT_DAY, SELECT_PREV_MONTH, SELECT_NEXT_MONTH } from './types';\n\nconst selectDay = date => ({ type: SELECT_DAY, payload: date });\n\nconst selectPrevMonth = month => ({\n    type: SELECT_PREV_MONTH,\n    payload: month,\n});\n\nconst selectNextMonth = month => ({\n    type: SELECT_NEXT_MONTH,\n    payload: month,\n});\n\nexport default { selectDay, selectPrevMonth, selectNextMonth };\n","export const SELECT_DAY = 'SELECT_DAY';\nexport const SELECT_PREV_MONTH = 'SELECT_PREV_MONTH';\nexport const SELECT_NEXT_MONTH = 'SELECT_NEXT_MONTH';\n\nexport const CREATE_REMINDER = 'CREATE_REMINDER';\nexport const UPDATE_REMINDER = 'UPDATE_REMINDER';\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\n","import { UPDATE_REMINDER, CREATE_REMINDER, DELETE_REMINDER } from './types';\nimport { uuid } from '../../utils';\n\nconst createReminder = reminder => {\n    const newReminder = {\n        ...reminder,\n        id: uuid(),\n    };\n\n    return {\n        type: CREATE_REMINDER,\n        payload: newReminder,\n    };\n};\n\nconst updateReminder = (id, modifiedReminder) => ({\n    type: UPDATE_REMINDER,\n    payload: { id, modifiedReminder },\n});\n\nconst deleteReminder = id => ({\n    type: DELETE_REMINDER,\n    payload: { id },\n});\n\nexport default { createReminder, updateReminder, deleteReminder };\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport '../styles/index.css';\nimport { Calendar, Reminders } from '../components';\nimport { remindersActions, calendarActions } from '../store/actions';\nimport { formatDateKey, sortByDate, filterRemindersByDate } from '../utils';\n\nclass App extends React.Component {\n    render() {\n        const { calendar, reminders } = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"wrapper\">\n                    <main>\n                        <Calendar {...calendar} />\n                    </main>\n                    <aside>\n                        <Reminders {...reminders} />\n                    </aside>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ calendar, reminders }) => ({\n    reminders,\n    calendar,\n});\n\nconst mapActionsToProps = dispatch => ({\n    calendarActions: bindActionCreators(calendarActions, dispatch),\n    remindersActions: bindActionCreators(remindersActions, dispatch),\n});\n\nconst mergeProps = (state, dispatch) => {\n    // Filter and sort reminders based on user selected date\n    const dateKey = formatDateKey(state.calendar.selectedDate);\n    const filteredReminders = filterRemindersByDate(\n        state.reminders.reminders,\n        dateKey,\n    );\n    const sortedReminders = sortByDate(filteredReminders);\n\n    return {\n        ...state,\n        calendar: {\n            ...state.calendar,\n            ...dispatch.calendarActions,\n            currentReminders: sortedReminders,\n            allReminders: state.reminders.reminders,\n        },\n        reminders: {\n            ...state.reminders,\n            ...dispatch.remindersActions,\n            selectedDate: state.calendar.selectedDate,\n            currentMonth: state.calendar.currentMonth,\n            reminders: sortedReminders,\n            selectCalendarDay: dispatch.calendarActions.selectDay,\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapActionsToProps,\n    mergeProps,\n)(App);\n","import {\n    SELECT_DAY,\n    SELECT_NEXT_MONTH,\n    SELECT_PREV_MONTH,\n} from '../actions/types';\n\nconst initialState = {\n    selectedDate: new Date(),\n    currentMonth: new Date(),\n};\n\nexport default (state = initialState, { type, payload }) => {\n    switch (type) {\n        case SELECT_DAY: {\n            return { ...state, selectedDate: payload };\n        }\n        case SELECT_NEXT_MONTH: {\n            return { ...state, currentMonth: payload };\n        }\n        case SELECT_PREV_MONTH: {\n            return { ...state, currentMonth: payload };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import {\n    CREATE_REMINDER,\n    UPDATE_REMINDER,\n    DELETE_REMINDER,\n} from '../actions/types';\nimport { sortByDate } from '../../utils';\n\nconst initialState = {\n    reminders: [],\n};\n\nexport default (state = initialState, { type, payload }) => {\n    switch (type) {\n        case CREATE_REMINDER: {\n            const newState = { ...state };\n\n            newState.reminders.push(payload);\n\n            const reminders = sortByDate(newState.reminders);\n\n            return { ...newState, reminders };\n        }\n        case UPDATE_REMINDER: {\n            const newState = { ...state };\n\n            const reminderIndex = newState.reminders.findIndex(\n                x => x.id === payload.id,\n            );\n            const reminderToUpdate = newState.reminders[reminderIndex];\n            if (typeof reminderToUpdate === 'undefined') {\n                return state;\n            }\n\n            Object.assign(newState.reminders[reminderIndex], {\n                ...reminderToUpdate,\n                ...payload.modifiedReminder,\n            });\n\n            const reminders = sortByDate(newState.reminders);\n\n            return { ...newState, reminders };\n        }\n        case DELETE_REMINDER: {\n            const newState = { ...state };\n\n            const reminders = sortByDate(\n                newState.reminders.filter(s => s.id !== payload.id),\n            );\n\n            return { ...newState, reminders };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import { combineReducers } from 'redux';\n\nimport calendarReducer from './calendar';\nimport remindersReducer from './reminders';\n\nexport default combineReducers({\n    calendar: calendarReducer,\n    reminders: remindersReducer,\n});\n","import { createStore } from 'redux';\n\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './containers';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}